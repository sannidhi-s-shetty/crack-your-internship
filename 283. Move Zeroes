## https://leetcode.com/problems/move-zeroes/

## Approach 1 : 
count zeroes 
class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int no_zeroes = 0;//count the number of zeroes
        int len = nums.size();
        
        for(int i=0;i<len;i++)
            if(nums[i]==0)
                no_zeroes++;
        
        vector<int> ans;
        for(int i=0;i<len;i++)
            if(nums[i]!=0)
                ans.push_back(nums[i]);
        
        while(no_zeroes--)
            ans.push_back(0);
        for(int i=0;i<len;i++)
            nums[i]=ans[i];
    
    }
};

## Approach 2 : 
" Bring all the non 0 elements to the front of array keeping their relative order same".
* This is a 2 pointer approach. 
* The fast pointer which is denoted by variable "cur" does the job of processing new elements. If the newly found element is not a 0, we record it just after the last found non-0 element. The position of last found non-0 element is denoted by the slow pointer "lastNonZeroFoundAt" variable. As we keep finding new non-0 elements, we just overwrite them at the "lastNonZeroFoundAt + 1" 'th index. This overwrite will not result in any loss of data because we already processed what was there.After the "cur" index reaches the end of array,"Move all 0's to the end". We now simply need to fill all the indexes after the "lastNonZeroFoundAt" index with 0.

class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        //two pointers  - fast pointer - cur
        //              - slow pointer
        int cur = 0,lastNonZeroFoundAt=0;
        while(cur<nums.size())
        {
            if(nums[cur]!=0)
                nums[lastNonZeroFoundAt++]=nums[cur];
            cur++;
        }
        while(lastNonZeroFoundAt<nums.size())
            nums[lastNonZeroFoundAt++]=0;   
    }
};
